#####################
### DATA CLEANING ###
#####################

### Libraries ###
library(stringr)
library(reshape)
library(reshape2)
library(dplyr)
library(plyr)
library(data.table)
library(splitstackshape)
library(doBy)
library(ggplot2)
library(foreign)
#library(randomNames)

### Setting Working Directory ###

setwd("Z:/Private/Internal/Clients/Coursera/Practice Clickstream")

### Calling and Exploring Data ###

MainData = read.csv("video-2016-10-21_2.csv", sep =",")
str(MainData)
names(MainData)
length(unique(MainData$illinois_user_id))

### Including time structure in the server_timestamp variable ###

class(MainData$server_timestamp)
MainData$server_timestamp = as.character(MainData$server_timestamp)
MainData$server_timestamp = as.POSIXct(strptime(MainData$server_timestamp, "%m/%d/%y %H:%M")) 

### Creating a variable replacing JSON format of playback_rate_delta ###

MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"\\\""] = NA
MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"-0.25\\\""] = -0.25
MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"-1\\\""] = -1
MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"0.25\\\""] = 0.25
MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"0\\\""] = 0
MainData$NewPlaybackRateDelta[MainData$playback_rate_delta == "{\\playback_rate_delta\\\":\\\"1\\\""] = 1

### Creating a variable replacing JSON format of playback_rate ###

MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"\\\"" ] = NA
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"0.75\\\""] = 0.75
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"1.25\\\""] = 1.25
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"1.5\\\""] = 1.5
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"1.75\\\""] = 1.75
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"1\\\""] = 1
MainData$NewPlaybackRate[MainData$playback_rate == "\\\"playback_rate\\\":\\\"2\\\""] = 2

### Creating a variable replacing JSON format of video_name ###

MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.1.1. Some Books on Data Visualization\\\""] = "1.1.1. Some Books on Data Visualization"            
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.1.2. Overview of Visualization\\\""] = "1.1.2. Overview of Visualization"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.2.1. 2-D Graphics\\\""] = "1.2.1. 2-D Graphics"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.2.2. 2-D Drawing\\\""] = "1.2.2. 2-D Drawing"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.2.3. 3-D Graphics\\\""] = "1.2.3. 3-D Graphics"                               
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.2.4. Photorealism\\\""] = "1.2.4. Photorealism"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.2.5. Non-Photorealism\\\""] = "1.2.5. Non-Photorealism"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.1. The Human\\\""] = "1.3.1. The Human"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.2. Memory\\\""] = "1.3.2. Memory"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.3. Reasoning\\\""] = "1.3.3. Reasoning"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.4. The Human Retina\\\""] = "1.3.4. The Human Retina"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.5. Perceiving Two Dimensions\\\""] = "1.3.5. Perceiving Two Dimensions"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"1.3.6. Perceiving Perspective\\\""] = "1.3.6. Perceiving Perspective"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.1.1. Data\\\""] = "2.1.1. Data"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.1.2. Mapping\\\""] = "2.1.2. Mapping"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.1.3. Charts\\\""] = "2.1.3. Charts"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.2.1. Glyphs (Part 1)\\\""] = "2.2.1. Glyphs Part 1"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.2.1. Glyphs (Part 2)\\\""] = "2.2.1. Glyphs Part 2"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.2.2. Parallel Coordinates\\\""] = "2.2.2. Parallel Coordinates"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.2.3. Stacked Graphs (Part 1)\\\""] = "2.2.3. Stacked Graphs Part 1"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.2.3. Stacked Graphs (Part 2)\\\""] = "2.2.3. Stacked Graphs Part 2"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.3.1. Tufte's Design Rules\\\""] = "2.3.1. Tufte's Design Rules"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"2.3.2. Using Color\\\""] = "2.3.2. Using Color"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.1.1. Graphs and Networks\\\""] = "3.1.1. Graphs and Networks"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.1.2. Embedding Planar Graphs\\\""] = "3.1.2. Embedding Planar Graphs"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.1.3. Graph Visualization\\\""] = "3.1.3. Graph Visualization"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.1.4. Tree Maps\\\""] = "3.1.4. Tree Maps"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.2.1. Principal Component Analysis\\\""] = "3.2.1. Principal Component Analysis"                
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.2.2. Multidimensional Scaling\\\""] = "3.2.2. Multidimensional Scaling"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"3.3.1. Packing\\\""] = "3.3.1. Packing"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.1. Visualization Systems\\\""] = "4.1.1. Visualization Systems"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.2. The Information Visualization Mantra: Part 1\\\""] = "4.1.2. The Information Visualization Mantra Part 1"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.2. The Information Visualization Mantra: Part 2\\\""] = "4.1.2. The Information Visualization Mantra: Part 2"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.2. The Information Visualization Mantra: Part 3\\\""] = "4.1.2. The Information Visualization Mantra: Part 3"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.3. Database Visualization Part: 1\\\""] = "4.1.3. Database Visualization Part 1"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.3. Database Visualization Part: 2\\\""] = "4.1.3. Database Visualization Part 2"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.1.3. Database Visualization Part: 3\\\""] = "4.1.3. Database Visualization Part 3"              
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"4.2.1. Visualization System Design\\\""] = "4.2.1. Visualization System Design"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"SVG-example\\\""] = "SVG-example"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"Week 1 Introduction\\\""] = "Week 1 Introduction"
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"Week 2 Introduction\\\""] = "Week 2 Introduction"                                
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"Week 3 Introduction\\\""] = "Week 3 Introduction"                                
MainData$NewVideoName[MainData$video_name == "\\\"video_name\\\":\\\"Week 4 Introduction\\\""] = "Week 4 Introduction"   

### Creating a variable replacing JSON format of module_id ###

MainData$NewModuleId[MainData$module_id == "\\\"module_id\\\":\\\"hYvka\\\""] = "hYvka"            
MainData$NewModuleId[MainData$module_id == "\\\"module_id\\\":\\\"muisM\\\""] = "muisM"
MainData$NewModuleId[MainData$module_id == "\\\"module_id\\\":\\\"pgrqZ\\\""] = "pgrqZ"
MainData$NewModuleId[MainData$module_id == "\\\"module_id\\\":\\\"pnOrr\\\""] = "pnOrr"
MainData$NewModuleId[MainData$module_id == "\\\"module_id\\\":\\\"\\\""] = NA

### Collapsing the data frame ###

# Sorting Variables
MainDataSort = MainData[order(MainData$illinois_user_id, MainData$video_name),] #sorting

# Dropping Variables and observation
myvars = names(MainDataSort) %in% c("illinois_user_id",
                                    "server_timestamp",
                                    "country_cd",
                                    "region_cd",
                                    "Keys",
                                    "NewVideoName",
                                    "NewModuleId")

MainDataSubset = MainDataSort[myvars]

table(MainDataSubset$Keys)
length(unique(MainDataSubset$illinois_user_id))
length(unique(MainDataSubset$NewVideoName))

# Creating NewID2 based on 3 potential IDs in the data
MainDataSubset$NewID2 = paste(MainDataSubset$illinois_user_id, MainDataSubset$NewVideoName, MainDataSubset$Keys, sep = ",")

# Sorting the Data by server_timestamp
MainDataSubset = MainDataSubset[order(MainDataSubset$server_timestamp),]

### Creating a NewMainData: a new dataset containing the minimum and maximum of each key timestamp ###

mins = aggregate(MainDataSubset[ , c("NewID2", "server_timestamp")]  ,list(MainDataSubset$NewID2) , min)
#mins_data = cSplit(as.data.table(mins), "NewID2", ",")
colnames(mins) = c("Group","NewID2", "min_server_timestamp")

maxi = aggregate(MainDataSubset[ , c("NewID2", "server_timestamp")]  ,list(MainDataSubset$NewID2) , max)
#maxi_data = cSplit(as.data.table(maxi), "NewID2", ",")
colnames(maxi) = c("Group","NewID2", "max_server_timestamp")

NewMainData = merge(mins, maxi, by ="NewID2")
myvars2 = names(NewMainData) %in% c("Group.y")
NewMainData = NewMainData[!myvars2]
names(NewMainData)

# Splitting NewID2 into the variables they represent 
NewMainData = cSplit(as.data.table(NewMainData), "NewID2", ",")
colnames(NewMainData) = c("Group", "FirstTime", "LastTime", "UserID", "VideoName", "Keys")

# Keeping only those variables of interest. In this case, we are keeping only FirstTime
NewMainData2 = subset(NewMainData, select = c("Group", "FirstTime", "Keys"))

# Reshaping our new data
melt.NewMainData = melt(NewMainData2, id.vars = c("Group", "Keys"))
dcast.NewMainData = dcast(melt.NewMainData, Group + variable ~ Keys)
split.NewMainData = cSplit(as.data.table(dcast.NewMainData), "Group", ",")

### Creating the final dataset ###

# Creating individual vectors by key
end = split.NewMainData[complete.cases(split.NewMainData$end), ]
end2 = subset(end, select = c("end", "Group_1", "Group_2"))

start = split.NewMainData[complete.cases(split.NewMainData$start), ]
start2 = subset(start, select= c("start", "Group_1", "Group_2"))

heartbeat = split.NewMainData[complete.cases(split.NewMainData$heartbeat), ]
heartbeat2 = subset(heartbeat, select= c("heartbeat", "Group_1", "Group_2"))

pause = split.NewMainData[complete.cases(split.NewMainData$pause), ]
pause2 = subset(pause, select= c("pause", "Group_1", "Group_2"))

play = split.NewMainData[complete.cases(split.NewMainData$play), ]
play2 = subset(play, select= c("play", "Group_1", "Group_2"))

seek = split.NewMainData[complete.cases(split.NewMainData$seek), ]
seek2 = subset(seek, select= c("seek", "Group_1", "Group_2"))

wait = split.NewMainData[complete.cases(split.NewMainData$wait), ]
wait2 = subset(wait, select= c("wait", "Group_1", "Group_2"))

subtitle = split.NewMainData[complete.cases(split.NewMainData$subtitle_change), ]
subtitle2 = subset(subtitle, select= c("subtitle_change", "Group_1", "Group_2"))

downloadv = split.NewMainData[complete.cases(split.NewMainData$download_subtitle), ]
downloadv2 = subset(downloadv, select= c("download_subtitle", "Group_1", "Group_2"))

playbackrate = split.NewMainData[complete.cases(split.NewMainData$playback_rate_change), ]
playbackrate2 = subset(playbackrate, select= c("playback_rate_change", "Group_1", "Group_2"))

volume = split.NewMainData[complete.cases(split.NewMainData$volume_change), ]
volume2 = subset(volume, select= c("volume_change", "Group_1", "Group_2"))

downloadsub = split.NewMainData[complete.cases(split.NewMainData$download_subtitle), ]
downloads2 = subset(downloadsub, select= c("download_subtitle", "Group_1", "Group_2"))

# Creating the FinalDataSet
list_df = list(end2, start2, heartbeat2, pause2, play2, seek2, wait2,
                subtitle2, playbackrate2)

FinalDataSet = merge_all(list_df)
head(FinalDataSet)

write.csv(FinalDataSet, "FinalDataSet.csv") #Just in case you want to double check the output


########################
### PRE-SHINY GRAPHS ###
########################

#### Continuation of the PracticeClickStream Code ####

# Creating the KeyForMainData table showing the count of every Key #

table(MainData$illinois_user_id)
names(MainData)
attach(MainData)
KeyForMainData = cbind(aggregate(Keys=="download_subtitle", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum),
                      aggregate(Keys=="end", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="heartbeat", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="pause", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="play", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="playback_rate_change", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="seek", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="start", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="subtitle_change", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="volume_change", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3],
                      aggregate(Keys=="wait", by=list(MainData$illinois_user_id, MainData$NewVideoName), sum)[,3])

colnames(KeyForMainData) = c("UserID","Video", "Delete", "end", "heartbeat","pause","play","playback_rate_change","seek","start",
                            "subtitle_change","volume_change","wait")

KeyForMainData = subset(KeyForMainData, select = c("UserID","Video", "end", "heartbeat",
                                                   "pause","play","playback_rate_change",
                                                   "seek","start", "subtitle_change",
                                                   "volume_change","wait"))
detach(MainData)

## Working with KeyForMainData Table and subseting it for the video called HB3DGraphics ##

KeyForMainData$HBMin = (KeyForMainData$heartbeat*5)/60

HB = subset(KeyForMainData, select = c("UserID", "Video", "HBMin"))

HBAverage = aggregate(HB[,c("HBMin")], list(HB$UserID, HB$Video), FUN = mean)
colnames(HBAverage) = c("ID", "Video", "Avg_HB_Time")

HB3DGraphics = subset(HBAverage, HBAverage$Video == "1.2.3. 3-D Graphics")

# Creating HB3DGraphics Density Graph (D1)
D1 <- ggplot(HB3DGraphics, aes(x = Avg_HB_Time, colour = Video)) + 
  geom_density(position="identity", fill = NA, size = 1) +
  scale_x_continuous(name = "Average Minutes",
                     breaks = seq(0, 200, 25),
                     limits=c(0, 50)) +
  scale_y_continuous(name = "Density") +
  ggtitle("Density plot of the average time invested in the video") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, family = "Tahoma", face = "bold"), 
        text = element_text(size = 12, family = "Tahoma")) +
  scale_colour_brewer(palette="Accent")
D1

## Using Objects end2 and start2 from ClickStreamPractice to work on graphs ##

StartEnd = merge(start2, end2, by = c("Group_1", "Group_2"))
StartEnd$MaxDuration = as.integer(abs((StartEnd$end - StartEnd$start)/60)) # We found several outliers
StartEndNoOut = subset(StartEnd, StartEnd$MaxDuration <= 180 ) # No outliers

# Creating a data frame that counts the minutes of videos maximum duration
MaxDurDF = data.frame(StartEndNoOut$MaxDuration, StartEndNoOut$Group_1, StartEndNoOut$Group_2) 
colnames(MaxDurDF) = c("maxduration", "ID", "Video")

# Merging HB3DGraphics and MaxDurDF
maxDurVSavg = merge(MaxDurDF, HB3DGraphics, by = c("ID", "Video"))

# Creating a graph that potentially shows how a particular video watched minutes compares with all videos
ggplot() + geom_density(aes(x=maxduration), colour="red", data = maxDurVSavg) + 
  geom_density(aes(x=Avg_HB_Time), colour="blue", data = maxDurVSavg) +
  ggtitle("Maximum Duration Vs Average time spent watching All Videos") +
  scale_colour_manual(values=c("blue", "red"))

# Creating density graph (D2): a graph for the Average Video Duration for All Videos
D2 <- ggplot(StartEndNoOut, aes(x = MaxDuration, colour = Group_2)) + 
  geom_density(position="identity", fill = NA, size = 1) +
  scale_x_continuous(name = "Average Minutes",
                     breaks = seq(0, 200, 25),
                     limits=c(0, 60)) +
  scale_y_continuous(name = "Density") +
  ggtitle("Density plot of the average time invested in the video") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, family = "Tahoma", face = "bold"), 
        text = element_text(size = 12, family = "Tahoma")) +
  scale_colour_brewer(palette="Accent")
D2

